import 'dart:developer';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:task_firebase/services/notifications_app.dart';

class FMServices {
  static Future<void> initialize() async {
    try {
      // ÿ∑ŸÑÿ® ÿßŸÑÿ£ÿ∞ŸàŸÜÿßÿ™
      NotificationSettings settings = await FirebaseMessaging.instance
          .requestPermission(
            alert: true,
            badge: true,
            sound: true,
            criticalAlert: false,
            provisional: false,
          );

      log('üì± Notification permission status: ${settings.authorizationStatus}');

      // ÿ•ÿπÿØÿßÿØÿßÿ™ ÿßŸÑÿ•ÿ¥ÿπÿßÿ±ÿßÿ™ ŸÅŸä ÿßŸÑŸàÿßÿ¨Ÿáÿ©
      await FirebaseMessaging.instance
          .setForegroundNotificationPresentationOptions(
            alert: true,
            badge: true,
            sound: true,
          );

      // ÿßŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿßŸÑÿ™ŸàŸÉŸÜ
      String? token = await FirebaseMessaging.instance.getToken();
      log('üî• FCM Token: $token');

      // ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿ™ŸàŸÉŸÜ
      FirebaseMessaging.instance.onTokenRefresh.listen((newToken) {
        log('üîÑ FCM Token refreshed: $newToken');
        // ŸáŸÜÿß ŸäŸÖŸÉŸÜŸÉ ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ™ŸàŸÉŸÜ ÿßŸÑÿ¨ÿØŸäÿØ ŸÑÿ≥Ÿäÿ±ŸÅÿ±ŸÉ
      });

      // ŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÑÿ•ÿ¥ÿπÿßÿ±ÿßÿ™ ŸÅŸä ŸÖÿÆÿ™ŸÑŸÅ ÿßŸÑÿ≠ÿßŸÑÿßÿ™
      _setupMessageHandlers();
    } catch (e) {
      log('‚ùå Error initializing FCM: $e');
    }
  }

  static void _setupMessageHandlers() {
    // ÿπŸÜÿØŸÖÿß ŸäŸÉŸàŸÜ ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ ŸÖŸÅÿ™Ÿàÿ≠ (foreground)
    FirebaseMessaging.onMessage.listen((RemoteMessage message) {
      log('üéØ Foreground message received');
      log('üì¶ Message data: ${message.data}');

      // ÿπÿ±ÿ∂ ÿ•ÿ¥ÿπÿßÿ± ŸÖÿ≠ŸÑŸä
      if (message.notification != null) {
        LocalNotifyService.displayTest(
          message.data['id'] != null
              ? int.parse(message.data['id'])
              : DateTime.now().millisecondsSinceEpoch.remainder(100000),
          message.notification?.title,
          message.notification?.body,
          message.data.toString(),
        );
      }
    });

    // ÿπŸÜÿØŸÖÿß ŸäŸÉŸàŸÜ ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ ŸÅŸä ÿßŸÑÿÆŸÑŸÅŸäÿ© (background) ŸàŸäÿ™ŸÖ ÿßŸÑŸÜŸÇÿ± ÿπŸÑŸâ ÿßŸÑÿ•ÿ¥ÿπÿßÿ±
    FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
      log('üì± App opened from background/terminated');
      log('üì¶ Message data: ${message.data}');

      // ŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÑÿ™ŸÜŸÇŸÑ ŸáŸÜÿß
      _handleMessageNavigation(message);
    });

    // ÿπŸÜÿØŸÖÿß ŸäŸÉŸàŸÜ ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ ŸÖÿ∫ŸÑŸÇÿßŸã ÿ™ŸÖÿßŸÖÿßŸã (terminated) ŸàŸäÿ™ŸÖ ŸÅÿ™ÿ≠Ÿá ÿπÿ®ÿ± ÿßŸÑÿ•ÿ¥ÿπÿßÿ±
    FirebaseMessaging.instance.getInitialMessage().then((
      RemoteMessage? message,
    ) {
      if (message != null) {
        log('üöÄ App opened from terminated state');
        log('üì¶ Message data: ${message.data}');

        // ÿ™ÿ£ÿÆŸäÿ± ŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÑÿ™ŸÜŸÇŸÑ ŸÑÿ∂ŸÖÿßŸÜ ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ ÿ®ÿßŸÑŸÉÿßŸÖŸÑ
        Future.delayed(const Duration(seconds: 2), () {
          _handleMessageNavigation(message);
        });
      }
    });
  }

  static void _handleMessageNavigation(RemoteMessage message) {
    // ŸáŸÜÿß ŸäŸÖŸÉŸÜŸÉ ŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÑÿ™ŸÜŸÇŸÑ ÿ®ŸÜÿßÿ°Ÿã ÿπŸÑŸâ ŸÖÿ≠ÿ™ŸàŸâ ÿßŸÑÿ±ÿ≥ÿßŸÑÿ©
    final data = message.data;

    if (data['type'] == 'order') {
      // ÿßŸÜÿ™ŸÇŸÑ ŸÑÿµŸÅÿ≠ÿ© ÿßŸÑÿ∑ŸÑÿ®ÿßÿ™
      // Navigator.push(context, MaterialPageRoute(builder: (_) => OrdersPage()));
    } else if (data['type'] == 'promotion') {
      // ÿßŸÜÿ™ŸÇŸÑ ŸÑÿµŸÅÿ≠ÿ© ÿßŸÑÿπÿ±Ÿàÿ∂
      // Navigator.push(context, MaterialPageRoute(builder: (_) => PromotionsPage()));
    }
  }

  static Future<void> subscribeToTopic(String topic) async {
    try {
      await FirebaseMessaging.instance.subscribeToTopic(topic);
      log('‚úÖ Subscribed to topic: $topic');
    } catch (e) {
      log('‚ùå Error subscribing to topic $topic: $e');
    }
  }

  static Future<void> unsubscribeFromTopic(String topic) async {
    try {
      await FirebaseMessaging.instance.unsubscribeFromTopic(topic);
      log('‚úÖ Unsubscribed from topic: $topic');
    } catch (e) {
      log('‚ùå Error unsubscribing from topic $topic: $e');
    }
  }

  static Future<void> deleteToken() async {
    try {
      await FirebaseMessaging.instance.deleteToken();
      log('‚úÖ FCM token deleted');
    } catch (e) {
      log('‚ùå Error deleting FCM token: $e');
    }
  }
}
